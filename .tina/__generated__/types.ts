//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from 'tinacms';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  sys?: Maybe<SystemInfo>;
  id: Scalars['ID'];
  form: Scalars['JSON'];
  values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
};

export type Query = {
  __typename?: 'Query';
  getCollection: Collection;
  getCollections: Array<Collection>;
  node: Node;
  getDocument: DocumentNode;
  getDocumentList: DocumentConnection;
  getDocumentFields: Scalars['JSON'];
  getPostsDocument: PostsDocument;
  getPostsList: PostsConnection;
  getAuthorDocument: AuthorDocument;
  getAuthorList: AuthorConnection;
};


export type QueryGetCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};


export type QueryGetPostsDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetPostsListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};


export type QueryGetAuthorDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetAuthorListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};

export type DocumentNode = PostsDocument | AuthorDocument;

export type PostsBlocksLongFormText = {
  __typename?: 'PostsBlocksLongFormText';
  content?: Maybe<Scalars['JSON']>;
};

export type PostsBlocksImg = {
  __typename?: 'PostsBlocksImg';
  img?: Maybe<Scalars['String']>;
};

export type PostsBlocksIframe = {
  __typename?: 'PostsBlocksIframe';
  url?: Maybe<Scalars['String']>;
};

export type PostsBlocks = PostsBlocksLongFormText | PostsBlocksImg | PostsBlocksIframe;

export type PostsAuthorDocument = AuthorDocument;

export type PostsFeaturePostPostDocument = PostsDocument;

export type PostsFeaturePost = {
  __typename?: 'PostsFeaturePost';
  post?: Maybe<PostsFeaturePostPostDocument>;
};

export type PostsFeaturePostsPostDocument = PostsDocument;

export type PostsFeaturePosts = {
  __typename?: 'PostsFeaturePosts';
  post?: Maybe<PostsFeaturePostsPostDocument>;
};

export type Posts = {
  __typename?: 'Posts';
  body?: Maybe<Scalars['JSON']>;
  blocks?: Maybe<Array<Maybe<PostsBlocks>>>;
  date?: Maybe<Scalars['String']>;
  minRead?: Maybe<Scalars['Float']>;
  title?: Maybe<Scalars['String']>;
  author?: Maybe<PostsAuthorDocument>;
  description?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  featurePost?: Maybe<PostsFeaturePost>;
  featurePosts?: Maybe<Array<Maybe<PostsFeaturePosts>>>;
};

export type PostsDocument = Node & Document & {
  __typename?: 'PostsDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Posts;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type PostsConnectionEdges = {
  __typename?: 'PostsConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<PostsDocument>;
};

export type PostsConnection = Connection & {
  __typename?: 'PostsConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PostsConnectionEdges>>>;
};

export type Author = {
  __typename?: 'Author';
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};

export type AuthorDocument = Node & Document & {
  __typename?: 'AuthorDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Author;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type AuthorConnectionEdges = {
  __typename?: 'AuthorConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<AuthorDocument>;
};

export type AuthorConnection = Connection & {
  __typename?: 'AuthorConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<AuthorConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  createDocument: DocumentNode;
  updatePostsDocument: PostsDocument;
  createPostsDocument: PostsDocument;
  updateAuthorDocument: AuthorDocument;
  createAuthorDocument: AuthorDocument;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdatePostsDocumentArgs = {
  relativePath: Scalars['String'];
  params: PostsMutation;
};


export type MutationCreatePostsDocumentArgs = {
  relativePath: Scalars['String'];
  params: PostsMutation;
};


export type MutationUpdateAuthorDocumentArgs = {
  relativePath: Scalars['String'];
  params: AuthorMutation;
};


export type MutationCreateAuthorDocumentArgs = {
  relativePath: Scalars['String'];
  params: AuthorMutation;
};

export type DocumentMutation = {
  posts?: InputMaybe<PostsMutation>;
  author?: InputMaybe<AuthorMutation>;
};

export type PostsBlocksLongFormTextMutation = {
  content?: InputMaybe<Scalars['JSON']>;
};

export type PostsBlocksImgMutation = {
  img?: InputMaybe<Scalars['String']>;
};

export type PostsBlocksIframeMutation = {
  url?: InputMaybe<Scalars['String']>;
};

export type PostsBlocksMutation = {
  longFormText?: InputMaybe<PostsBlocksLongFormTextMutation>;
  img?: InputMaybe<PostsBlocksImgMutation>;
  iframe?: InputMaybe<PostsBlocksIframeMutation>;
};

export type PostsFeaturePostMutation = {
  post?: InputMaybe<Scalars['String']>;
};

export type PostsFeaturePostsMutation = {
  post?: InputMaybe<Scalars['String']>;
};

export type PostsMutation = {
  body?: InputMaybe<Scalars['JSON']>;
  blocks?: InputMaybe<Array<InputMaybe<PostsBlocksMutation>>>;
  date?: InputMaybe<Scalars['String']>;
  minRead?: InputMaybe<Scalars['Float']>;
  title?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  featurePost?: InputMaybe<PostsFeaturePostMutation>;
  featurePosts?: InputMaybe<Array<InputMaybe<PostsFeaturePostsMutation>>>;
};

export type AuthorMutation = {
  name?: InputMaybe<Scalars['String']>;
  avatar?: InputMaybe<Scalars['String']>;
};

export type PostsPartsFragment = { __typename?: 'Posts', body?: any | null | undefined, date?: string | null | undefined, minRead?: number | null | undefined, title?: string | null | undefined, description?: string | null | undefined, tags?: Array<string | null | undefined> | null | undefined, blocks?: Array<{ __typename: 'PostsBlocksLongFormText', content?: any | null | undefined } | { __typename: 'PostsBlocksImg', img?: string | null | undefined } | { __typename: 'PostsBlocksIframe', url?: string | null | undefined } | null | undefined> | null | undefined, author?: { __typename?: 'AuthorDocument', id: string } | null | undefined, featurePost?: { __typename: 'PostsFeaturePost', post?: { __typename?: 'PostsDocument', id: string } | null | undefined } | null | undefined, featurePosts?: Array<{ __typename: 'PostsFeaturePosts', post?: { __typename?: 'PostsDocument', id: string } | null | undefined } | null | undefined> | null | undefined };

export type AuthorPartsFragment = { __typename?: 'Author', name?: string | null | undefined, avatar?: string | null | undefined };

export type GetPostsDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetPostsDocumentQuery = { __typename?: 'Query', getPostsDocument: { __typename?: 'PostsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Posts', body?: any | null | undefined, date?: string | null | undefined, minRead?: number | null | undefined, title?: string | null | undefined, description?: string | null | undefined, tags?: Array<string | null | undefined> | null | undefined, blocks?: Array<{ __typename: 'PostsBlocksLongFormText', content?: any | null | undefined } | { __typename: 'PostsBlocksImg', img?: string | null | undefined } | { __typename: 'PostsBlocksIframe', url?: string | null | undefined } | null | undefined> | null | undefined, author?: { __typename?: 'AuthorDocument', id: string } | null | undefined, featurePost?: { __typename: 'PostsFeaturePost', post?: { __typename?: 'PostsDocument', id: string } | null | undefined } | null | undefined, featurePosts?: Array<{ __typename: 'PostsFeaturePosts', post?: { __typename?: 'PostsDocument', id: string } | null | undefined } | null | undefined> | null | undefined } } };

export type GetPostsListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPostsListQuery = { __typename?: 'Query', getPostsList: { __typename?: 'PostsConnection', totalCount: number, edges?: Array<{ __typename?: 'PostsConnectionEdges', node?: { __typename?: 'PostsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Posts', body?: any | null | undefined, date?: string | null | undefined, minRead?: number | null | undefined, title?: string | null | undefined, description?: string | null | undefined, tags?: Array<string | null | undefined> | null | undefined, blocks?: Array<{ __typename: 'PostsBlocksLongFormText', content?: any | null | undefined } | { __typename: 'PostsBlocksImg', img?: string | null | undefined } | { __typename: 'PostsBlocksIframe', url?: string | null | undefined } | null | undefined> | null | undefined, author?: { __typename?: 'AuthorDocument', id: string } | null | undefined, featurePost?: { __typename: 'PostsFeaturePost', post?: { __typename?: 'PostsDocument', id: string } | null | undefined } | null | undefined, featurePosts?: Array<{ __typename: 'PostsFeaturePosts', post?: { __typename?: 'PostsDocument', id: string } | null | undefined } | null | undefined> | null | undefined } } | null | undefined } | null | undefined> | null | undefined } };

export type GetAuthorDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetAuthorDocumentQuery = { __typename?: 'Query', getAuthorDocument: { __typename?: 'AuthorDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Author', name?: string | null | undefined, avatar?: string | null | undefined } } };

export type GetAuthorListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAuthorListQuery = { __typename?: 'Query', getAuthorList: { __typename?: 'AuthorConnection', totalCount: number, edges?: Array<{ __typename?: 'AuthorConnectionEdges', node?: { __typename?: 'AuthorDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Author', name?: string | null | undefined, avatar?: string | null | undefined } } | null | undefined } | null | undefined> | null | undefined } };

export const PostsPartsFragmentDoc = gql`
    fragment PostsParts on Posts {
  body
  blocks {
    __typename
    ... on PostsBlocksLongFormText {
      content
    }
    ... on PostsBlocksImg {
      img
    }
    ... on PostsBlocksIframe {
      url
    }
  }
  date
  minRead
  title
  author {
    ... on Document {
      id
    }
  }
  description
  tags
  featurePost {
    __typename
    post {
      ... on Document {
        id
      }
    }
  }
  featurePosts {
    __typename
    post {
      ... on Document {
        id
      }
    }
  }
}
    `;
export const AuthorPartsFragmentDoc = gql`
    fragment AuthorParts on Author {
  name
  avatar
}
    `;
export const GetPostsDocumentDocument = gql`
    query getPostsDocument($relativePath: String!) {
  getPostsDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...PostsParts
    }
  }
}
    ${PostsPartsFragmentDoc}`;
export const GetPostsListDocument = gql`
    query getPostsList {
  getPostsList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...PostsParts
        }
      }
    }
  }
}
    ${PostsPartsFragmentDoc}`;
export const GetAuthorDocumentDocument = gql`
    query getAuthorDocument($relativePath: String!) {
  getAuthorDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...AuthorParts
    }
  }
}
    ${AuthorPartsFragmentDoc}`;
export const GetAuthorListDocument = gql`
    query getAuthorList {
  getAuthorList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...AuthorParts
        }
      }
    }
  }
}
    ${AuthorPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      getPostsDocument(variables: GetPostsDocumentQueryVariables, options?: C): Promise<{data: GetPostsDocumentQuery, variables: GetPostsDocumentQueryVariables, query: string}> {
        return requester<{data: GetPostsDocumentQuery, variables: GetPostsDocumentQueryVariables, query: string}, GetPostsDocumentQueryVariables>(GetPostsDocumentDocument, variables, options);
      },
    getPostsList(variables?: GetPostsListQueryVariables, options?: C): Promise<{data: GetPostsListQuery, variables: GetPostsListQueryVariables, query: string}> {
        return requester<{data: GetPostsListQuery, variables: GetPostsListQueryVariables, query: string}, GetPostsListQueryVariables>(GetPostsListDocument, variables, options);
      },
    getAuthorDocument(variables: GetAuthorDocumentQueryVariables, options?: C): Promise<{data: GetAuthorDocumentQuery, variables: GetAuthorDocumentQueryVariables, query: string}> {
        return requester<{data: GetAuthorDocumentQuery, variables: GetAuthorDocumentQueryVariables, query: string}, GetAuthorDocumentQueryVariables>(GetAuthorDocumentDocument, variables, options);
      },
    getAuthorList(variables?: GetAuthorListQueryVariables, options?: C): Promise<{data: GetAuthorListQuery, variables: GetAuthorListQueryVariables, query: string}> {
        return requester<{data: GetAuthorListQuery, variables: GetAuthorListQueryVariables, query: string}, GetAuthorListQueryVariables>(GetAuthorListDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { staticRequest } from 'tinacms'
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  let data = {}
  try {
    data = await staticRequest({
      query: doc,
      variables: vars,
    })
  } catch (e) {
    // swallow errors related to document creation
    console.warn('Warning: There was an error when fetching data')
    console.warn(e)
  }

  return { data, query: doc, variables: vars || {} }
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = ()=>getSdk(requester)

