// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};



export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: Maybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  sys?: Maybe<SystemInfo>;
  id: Scalars['ID'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Int'];
};

export type Query = {
  __typename?: 'Query';
  getCollection: Collection;
  getCollections: Array<Collection>;
  node: Node;
  getDocument: DocumentNode;
  getDocumentList: DocumentConnection;
  getPostsDocument: PostsDocument;
  getPostsList: PostsConnection;
  getAuthorDocument: AuthorDocument;
  getAuthorList: AuthorConnection;
};


export type QueryGetCollectionArgs = {
  collection?: Maybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: Maybe<Scalars['String']>;
};


export type QueryGetDocumentArgs = {
  collection?: Maybe<Scalars['String']>;
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryGetDocumentListArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryGetPostsDocumentArgs = {
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryGetPostsListArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryGetAuthorDocumentArgs = {
  relativePath?: Maybe<Scalars['String']>;
};


export type QueryGetAuthorListArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label: Scalars['String'];
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type DocumentNode = PostsDocument | AuthorDocument;

export type PostsBlocksLongFormText = {
  __typename?: 'PostsBlocksLongFormText';
  content?: Maybe<Scalars['String']>;
};

export type PostsBlocksImg = {
  __typename?: 'PostsBlocksImg';
  img?: Maybe<Scalars['String']>;
};

export type PostsBlocksIframe = {
  __typename?: 'PostsBlocksIframe';
  url?: Maybe<Scalars['String']>;
};

export type PostsBlocks = PostsBlocksLongFormText | PostsBlocksImg | PostsBlocksIframe;

export type PostsAuthorDocument = AuthorDocument;

export type PostsFeaturePostPostDocument = PostsDocument;

export type PostsFeaturePost = {
  __typename?: 'PostsFeaturePost';
  post?: Maybe<PostsFeaturePostPostDocument>;
};

export type PostsFeaturePostsPostDocument = PostsDocument;

export type PostsFeaturePosts = {
  __typename?: 'PostsFeaturePosts';
  post?: Maybe<PostsFeaturePostsPostDocument>;
};

export type Posts = {
  __typename?: 'Posts';
  body?: Maybe<Scalars['String']>;
  blocks?: Maybe<Array<Maybe<PostsBlocks>>>;
  date?: Maybe<Scalars['String']>;
  minRead?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  author?: Maybe<PostsAuthorDocument>;
  description?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  featurePost?: Maybe<PostsFeaturePost>;
  featurePosts?: Maybe<Array<Maybe<PostsFeaturePosts>>>;
};

export type PostsDocument = Node & Document & {
  __typename?: 'PostsDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Posts;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type PostsConnectionEdges = {
  __typename?: 'PostsConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<PostsDocument>;
};

export type PostsConnection = Connection & {
  __typename?: 'PostsConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
  edges?: Maybe<Array<Maybe<PostsConnectionEdges>>>;
};

export type Author = {
  __typename?: 'Author';
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};

export type AuthorDocument = Node & Document & {
  __typename?: 'AuthorDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Author;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type AuthorConnectionEdges = {
  __typename?: 'AuthorConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<AuthorDocument>;
};

export type AuthorConnection = Connection & {
  __typename?: 'AuthorConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Int'];
  edges?: Maybe<Array<Maybe<AuthorConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  updatePostsDocument: PostsDocument;
  updateAuthorDocument: AuthorDocument;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: Maybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdatePostsDocumentArgs = {
  relativePath: Scalars['String'];
  params: PostsMutation;
};


export type MutationUpdateAuthorDocumentArgs = {
  relativePath: Scalars['String'];
  params: AuthorMutation;
};

export type DocumentMutation = {
  posts?: Maybe<PostsMutation>;
  author?: Maybe<AuthorMutation>;
};

export type PostsBlocksLongFormTextMutation = {
  content?: Maybe<Scalars['String']>;
};

export type PostsBlocksImgMutation = {
  img?: Maybe<Scalars['String']>;
};

export type PostsBlocksIframeMutation = {
  url?: Maybe<Scalars['String']>;
};

export type PostsBlocksMutation = {
  longFormText?: Maybe<PostsBlocksLongFormTextMutation>;
  img?: Maybe<PostsBlocksImgMutation>;
  iframe?: Maybe<PostsBlocksIframeMutation>;
};

export type PostsFeaturePostMutation = {
  post?: Maybe<Scalars['String']>;
};

export type PostsFeaturePostsMutation = {
  post?: Maybe<Scalars['String']>;
};

export type PostsMutation = {
  body?: Maybe<Scalars['String']>;
  blocks?: Maybe<Array<Maybe<PostsBlocksMutation>>>;
  date?: Maybe<Scalars['String']>;
  minRead?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  featurePost?: Maybe<PostsFeaturePostMutation>;
  featurePosts?: Maybe<Array<Maybe<PostsFeaturePostsMutation>>>;
};

export type AuthorMutation = {
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};

