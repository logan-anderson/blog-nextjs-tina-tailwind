# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(before: String, after: String, first: Int, last: Int): PostsConnection!
  getAuthorDocument(relativePath: String): AuthorDocument!
  getAuthorList(before: String, after: String, first: Int, last: Int): AuthorConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = PostsDocument | AuthorDocument

type PostsBlocksLongFormText {
  content: String
}

type PostsBlocksImg {
  img: String
}

type PostsBlocksIframe {
  url: String
}

union PostsBlocks = PostsBlocksLongFormText | PostsBlocksImg | PostsBlocksIframe

union PostsAuthorDocument = AuthorDocument

type Posts {
  body: String
  blocks: [PostsBlocks]
  date: String
  minRead: Int
  title: String
  author: PostsAuthorDocument
  description: String
  tags: [String]
}

type PostsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PostsConnectionEdges]
}

type Author {
  name: String
  avatar: String
}

type AuthorDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Author!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type AuthorConnectionEdges {
  cursor: String
  node: AuthorDocument
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [AuthorConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  updateAuthorDocument(relativePath: String!, params: AuthorMutation!): AuthorDocument!
}

input DocumentMutation {
  posts: PostsMutation
  author: AuthorMutation
}

input PostsBlocksLongFormTextMutation {
  content: String
}

input PostsBlocksImgMutation {
  img: String
}

input PostsBlocksIframeMutation {
  url: String
}

input PostsBlocksMutation {
  longFormText: PostsBlocksLongFormTextMutation
  img: PostsBlocksImgMutation
  iframe: PostsBlocksIframeMutation
}

input PostsMutation {
  body: String
  blocks: [PostsBlocksMutation]
  date: String
  minRead: Int
  title: String
  author: String
  description: String
  tags: [String]
}

input AuthorMutation {
  name: String
  avatar: String
}

schema {
  query: Query
  mutation: Mutation
}
  