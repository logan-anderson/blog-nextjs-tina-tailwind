# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  projects(relativePath: String): Projects!
  projectsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjectsFilter): ProjectsConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorFilter): AuthorConnection!
}

input DocumentFilter {
  projects: ProjectsFilter
  post: PostFilter
  author: AuthorFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Projects | Post | Author | Folder

type ProjectsProjects {
  fromGithub: Boolean
  label: String
  excerpt: String
  slug: String
  imgUrl: String
  url: String
  rawMarkdown: JSON
}

type Projects implements Node & Document {
  projects: [ProjectsProjects]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ProjectsProjectsFilter {
  fromGithub: BooleanFilter
  label: StringFilter
  excerpt: StringFilter
  slug: StringFilter
  imgUrl: StringFilter
  url: StringFilter
  rawMarkdown: RichTextFilter
}

input ProjectsFilter {
  projects: ProjectsProjectsFilter
}

type ProjectsConnectionEdges {
  cursor: String!
  node: Projects
}

type ProjectsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjectsConnectionEdges]
}

union PostAuthor = Author

union PostFeaturePostsPost = Post

type PostFeaturePosts {
  post: PostFeaturePostsPost
}

type Post implements Node & Document {
  draft: Boolean
  title: String!
  date: String
  body: JSON
  minRead: Float
  author: PostAuthor
  description: String
  tags: [String]
  featurePosts: [PostFeaturePosts]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input PostBodyIframeFilter {
  url: StringFilter
  height: StringFilter
  width: StringFilter
}

input PostBodyFilter {
  Iframe: PostBodyIframeFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input PostAuthorFilter {
  author: AuthorFilter
}

input PostFeaturePostsPostFilter {
  post: PostFilter
}

input PostFeaturePostsFilter {
  post: PostFeaturePostsPostFilter
}

input PostFilter {
  draft: BooleanFilter
  title: StringFilter
  date: DatetimeFilter
  body: PostBodyFilter
  minRead: NumberFilter
  author: PostAuthorFilter
  description: StringFilter
  tags: StringFilter
  featurePosts: PostFeaturePostsFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Author implements Node & Document {
  name: String
  avatar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AuthorFilter {
  name: StringFilter
  avatar: StringFilter
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateProjects(relativePath: String!, params: ProjectsMutation!): Projects!
  createProjects(relativePath: String!, params: ProjectsMutation!): Projects!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
}

input DocumentUpdateMutation {
  projects: ProjectsMutation
  post: PostMutation
  author: AuthorMutation
  relativePath: String
}

input DocumentMutation {
  projects: ProjectsMutation
  post: PostMutation
  author: AuthorMutation
}

input ProjectsProjectsMutation {
  fromGithub: Boolean
  label: String
  excerpt: String
  slug: String
  imgUrl: String
  url: String
  rawMarkdown: JSON
}

input ProjectsMutation {
  projects: [ProjectsProjectsMutation]
}

input PostFeaturePostsMutation {
  post: String
}

input PostMutation {
  draft: Boolean
  title: String
  date: String
  body: JSON
  minRead: Float
  author: String
  description: String
  tags: [String]
  featurePosts: [PostFeaturePostsMutation]
}

input AuthorMutation {
  name: String
  avatar: String
}

schema {
  query: Query
  mutation: Mutation
}
